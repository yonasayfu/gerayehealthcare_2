<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Traits\ExportableTrait;
use App\Http\Config\ExportConfig;
use App\Models\Patient;
use Barryvdh\DomPDF\Facade\Pdf;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Response;
use Inertia\Inertia;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Auth; // <-- Import Auth facade for getting logged in user

class PatientController extends Controller
{
    use ExportableTrait;
    public function index(Request $request): \Inertia\Response
    {
        $query = Patient::query();

        if ($request->filled('search')) {
            $search = $request->input('search');
            $query->where('full_name', 'ilike', "%{$search}%")
                  ->orWhere('email', 'ilike', "%{$search}%");
        }

        // --- FIX: Robust sorting parameter handling ---
        if ($request->filled('sort') && !empty($request->input('sort'))) {
            $query->orderBy($request->input('sort'), $request->input('direction', 'asc'));
        } else {
            // Default sort if no valid 'sort' parameter is provided
            $query->orderBy('created_at', 'desc');
        }
        // --- END FIX ---

        $patients = $query->paginate($request->input('per_page', 5))->withQueryString();

        return Inertia::render('Admin/Patients/Index', [
            'patients' => $patients,
            'filters' => $request->only(['search', 'sort', 'direction', 'per_page']),
        ]);
    }

    public function create()
    {
        return Inertia::render('Admin/Patients/Create');
    }

    public function store(Request $request)
    {
        $data = $request->validate([
            'full_name' => 'required|string|max:255',
            'fayda_id' => 'nullable|string|max:255|unique:patients,fayda_id',
            'date_of_birth' => 'required|date',
            'gender' => 'nullable|string|max:10',
            'address' => 'nullable|string',
            'phone_number' => 'nullable|string|regex:/^[0-9+\-\s\(\)]+$/|max:255', // Removed unique validation
            'email' => 'nullable|email:rfc,dns|max:255', // Validation for email
            'emergency_contact' => 'nullable|string',
            'source' => 'nullable|string|max:255|in:TikTok,Website,Referral,Walk-in',
            'geolocation' => 'nullable|string',
            // patient_code is generated by the model's booted method, not from request
        ]);

        // --- NEW FEATURE: Assign the logged-in user as the registrant ---
        // This assumes the logged-in user is a 'staff' member.
        // Adjust this logic if different user types register patients (e.g., Auth::guard('caregiver')->check())
        if (Auth::check()) {
            $user = Auth::user();
            // Directly find the staff member associated with the logged-in user's ID
            $staffMember = \App\Models\Staff::where('user_id', $user->id)->first();

            if ($staffMember) {
                $data['registered_by_staff_id'] = $staffMember->id;
            }
            // If you also need to handle caregivers, you would add similar logic here
            // For example, if a caregiver is also a user and has a caregiver profile:
            // if ($user->caregiver) {
            //     $data['registered_by_caregiver_id'] = $user->caregiver->id;
            // }
        }
        // --- END NEW FEATURE ---

        Patient::create($data);

        return redirect()->route('admin.patients.index')->with('success', 'Patient created successfully.');
    }

    /**
     * Display the specified resource.
     */
    public function show(Patient $patient)
    {
        // Eager load the relationships needed for the 'registered by' display
        // and ensure accessors like 'age' are available.
        $patient->load(['registeredByStaff']);

        return Inertia::render('Admin/Patients/Show', [
            'patient' => $patient,
        ]);
    }

    public function edit(Patient $patient)
    {
        return Inertia::render('Admin/Patients/Edit', [
            'patient' => $patient,
        ]);
    }

     public function update(Request $request, Patient $patient)
    {
        $data = $request->validate([
            'full_name' => 'required|string|max:255',
            'fayda_id' => ['nullable', 'string', 'max:255', Rule::unique('patients')->ignore($patient->id)],
            'date_of_birth' => 'required|date',
            'gender' => 'nullable|string|max:10',
            'address' => 'nullable|string',
            'phone_number' => 'nullable|string|regex:/^[0-9+\-\s\(\)]+$/|max:255', // Removed unique validation
            'email' => 'nullable|email:rfc,dns|max:255', // Validation for email
            'emergency_contact' => 'nullable|string',
            'source' => 'nullable|string|max:255|in:TikTok,Website,Referral,Walk-in',
            'geolocation' => 'nullable|string',
        ]);

        // Note: For update, 'registered_by_staff_id' is typically not updated here,
        // as it represents the initial registrant. If you need to change it,
        // you'd add validation and a field to your edit form.

        $patient->update($data);

        return redirect()->route('admin.patients.index')->with('success', 'Patient updated successfully.');
    }

    public function destroy(Patient $patient)
    {
        $patient->delete();
        return back()->with('success', 'Patient deleted successfully.');
    }

    public function export(Request $request)
    {
        return $this->handleExport($request, Patient::class, ExportConfig::getPatientConfig());
    }

    public function printSingle(Patient $patient)
    {
        // For single patient print, eager load relationships if you display who registered them
        $patient->load(['registeredByStaff', 'registeredByCaregiver']);

        $config = ExportConfig::getPatientConfig()['single_record'];
        $config['title'] = 'Patient Record - ' . $patient->full_name;
        $config['document_title'] = 'Patient Record';
        $config['filename'] = "patient-{$patient->patient_code}.pdf";
        
        return $this->generateSingleRecordPdf($patient, $config);
    }

    public function printCurrent(Request $request)
    {
        return $this->handlePrintCurrent($request, Patient::class, ExportConfig::getPatientConfig());
    }

    public function printAll(Request $request)
    {
        return $this->handlePrintAll($request, Patient::class, ExportConfig::getPatientConfig());
    }
}
